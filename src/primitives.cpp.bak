#include <gint/display.h>
#include <math.h>
#include "primitives.h"


/* return the sign of the number given in parameter*/
/* -1 if x<0   0 if x=0 and +1 if x>0 */
int _sgn( int x )
{
       if(x>=0)
              return 1;
       else if(x<0)
              return -1;
       else
              return 0;
}

/* return the absolute value of the number given in parameter*/
int _abs( int x )
{
       if(x>=0)
              return x;
       else
              return -1*x;
}

/* draw a pixel at coordinates (X,Y) of color (R,G,B) */
/* all color values (R,G,B) to be in the range 0..255 */
void _fastPixelRGB( int X, int Y, int R, int G, int B )
{
       if (X>=0 && X<=DWIDTH && Y>=0 && Y<=DHEIGHT)
       {
              gint_vram[ Y*DWIDTH + X ] = (((R>>3) << 11) | ((G>>3) << 6) | (B>>3));
       }
}

/* return the color of the pixel at coordinates (X,Y) */
/* modifies R,G,B given as parameters */
/* all returns R,G,B are in range 0..255 */
void _getPixelRGB( int X, int Y, int* R, int* G, int* B )
{
       if (X>=0 && X<=DWIDTH && Y>=0 && Y<=DHEIGHT)
       {
              int res = gint_vram[ Y*DWIDTH + X ];
              char red = ((res >> 11 ) & 0b11111);
              char green =  ((res >> 6 ) & 0b011111);        // Green is normally coded over 6bits but to get "non-greenish screen", limit to 5bits only
              char blue = (res & 0b11111);

              *R = red << 3;
              *G = green << 3;
              *B = blue << 3;
       }
}

void _calculateBlendRGBA( int X, int Y, int* R, int* G, int* B, int A )
{
       int Rs=*R;
       int Gs=*G;
       int Bs=*B;

       //_getPixelRGB( X, Y, &Rs, &Gs, &Bs );    // We take the current color for that pixel

       float alpha = ((float) A) / 255.0f;
       float oneminusalpha = 1.0f - alpha;

       float newR = ((float) (*R) * alpha) + (oneminusalpha * ((float) Rs ));
       float newG = ((float) (*G) * alpha) + (oneminusalpha * ((float) Gs ));
       float newB = ((float) (*B) * alpha) + (oneminusalpha * ((float) Bs ));
       *R = (int) newR;
       *G = (int) newG;
       *B = (int) newB;
}

void _pixelRGBA( int X, int Y, int R, int G, int B, int A )
{
       if (X>=0 && X<=DWIDTH && Y>=0 && Y<=DHEIGHT)
       {
           if (A==0) return;
           else if (A==255) _fastPixelRGB( X, Y, R, G, B );
           else
           {
                  int Rf = R;
                  int Gf = G;
                  int Bf = B;
                  _calculateBlendRGBA( X, Y, &Rf, &Gf, &Bf, A );
                  _fastPixelRGB( X, Y, Rf, Gf, Bf );
           }
       }
}

void _lineRGBA(int X1, int Y1, int X2, int Y2, int R, int G, int B, int A )
{
       int x,y,dx,dy,swp,temp,s1,s2,p,i;

       x=X1;
       y=Y1;
       dx=_abs(X2-X1);
       dy=_abs(Y2-Y1);
       s1=_sgn(X2-X1);
       s2=_sgn(Y2-Y1);
       swp=0;

       _pixelRGBA( X1, Y1, R, G, B, A );

       if(dy>dx)
       {
              temp=dx;
              dx=dy;
              dy=temp;
              swp=1;
       }
       p=2*dy-dx;
       for(i=0; i<dx; i++)
       {
              _pixelRGBA( x, y, R, G, B, A );

              while(p>=0)
              {
                     p=p-2*dx;
                     if(swp)
                            x+=s1;
                     else
                            y+=s2;
              }
              p=p+2*dy;
              if(swp)
                     y+=s2;
              else
                     x+=s1;
       }
}

void _rectangleRGBA( int X1, int Y1, int X2, int Y2, int R, int G, int B, int A )
{

       _lineRGBA( X1, Y1, X1, Y2, R, G, B, A ) ;
       _lineRGBA( X1, Y2, X2, Y2, R, G, B, A ) ;
       _lineRGBA( X2, Y2, X2, Y1, R, G, B, A ) ;
       _lineRGBA( X2, Y1, X1, Y1, R, G, B, A ) ;

}

void _boxRGBA( int X1, int Y1, int X2, int Y2, int R, int G, int B, int A )
{
      if (Y1<=Y2)
       {
              for( int k=Y1; k<=Y2; k++)
                     _lineRGBA( X1, k, X2, k, R, G, B, A ) ;
       }
       else
       {
              for( int k=Y2; k<=Y1; k++)
                     _lineRGBA( X1, k, X2, k, R, G, B, A ) ;
       }

}

void _circleRGBA( int X1, int Y1, int Rad, int R, int G, int B, int A )
{

       int x,y,p;

       x=0;
       y=Rad;
       p=3-2*Rad;

       _pixelRGBA(X1+x,Y1+y,R,G,B,A);
       _pixelRGBA(X1+x,Y1-y,R,G,B,A);
       _pixelRGBA(X1-x,Y1+y,R,G,B,A);
       _pixelRGBA(X1-x,Y1-y,R,G,B,A);
       _pixelRGBA(X1+y,Y1+x,R,G,B,A);
       _pixelRGBA(X1+y,Y1-x,R,G,B,A);
       _pixelRGBA(X1-y,Y1+x,R,G,B,A);
       _pixelRGBA(X1-y,Y1-x,R,G,B,A);

       while(x<y)
       {
              if(p<0)
              {
                     x++;
                     p=p+4*x+6;
              }
              else
              {
                     x++;
                     y--;
                     p=p+4*(x-y)+10;
              }
              _pixelRGBA(X1+x,Y1+y,R,G,B,A);
              _pixelRGBA(X1+x,Y1-y,R,G,B,A);
              _pixelRGBA(X1-x,Y1+y,R,G,B,A);
              _pixelRGBA(X1-x,Y1-y,R,G,B,A);
              _pixelRGBA(X1+y,Y1+x,R,G,B,A);
              _pixelRGBA(X1+y,Y1-x,R,G,B,A);
              _pixelRGBA(X1-y,Y1+x,R,G,B,A);
              _pixelRGBA(X1-y,Y1-x,R,G,B,A);
       }

}

void _filledCircleRGBA( int X1, int Y1, int Rad, int R, int G, int B, int A )
{

       int x,y,p;

       x=0;
       y=Rad;
       p=3-2*Rad;

       _lineRGBA(X1+x,Y1+y, X1+x,Y1-y,R,G,B,A);
       _lineRGBA(X1-x,Y1+y, X1-x,Y1-y,R,G,B,A);
       _lineRGBA(X1+y,Y1+x, X1+y,Y1-x,R,G,B,A);
       _lineRGBA(X1-y,Y1+x, X1-y,Y1-x,R,G,B,A);

       while(x<y)
       {
              if(p<0)
              {
                     x++;
                     p=p+4*x+6;
              }
              else
              {
                     x++;
                     y--;
                     p=p+4*(x-y)+10;
              }

              _lineRGBA(X1+x,Y1+y, X1+x,Y1-y,R,G,B,A);
              _lineRGBA(X1-x,Y1+y, X1-x,Y1-y,R,G,B,A);
              _lineRGBA(X1+y,Y1+x, X1+y,Y1-x,R,G,B,A);
              _lineRGBA(X1-y,Y1+x, X1-y,Y1-x,R,G,B,A);
       }

}
